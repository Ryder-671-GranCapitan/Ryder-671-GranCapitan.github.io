{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Tarea1_2/Tarea1_2/","title":"Pr\u00e1ctica 2.1","text":""},{"location":"Tarea1_2/Tarea1_2/#instalacion-y-configuracion-de-un-servidor-web-nginx","title":"Instalaci\u00f3n y configuraci\u00f3n de un servidor web Nginx","text":""},{"location":"Tarea1_2/Tarea1_2/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea1_2/Tarea1_2/#1-instalacion-del-servidor-web-nginx","title":"1. Instalaci\u00f3n del servidor web Nginx","text":"<p>Antes de hacer nada, debemos actualizar la m\u00e1quina con <code>apt update</code>. Una vez hecho esto, podemos instalar nginx con <code>apt install nginx</code>. Verificamos que se ha instalado correctamente con <code>systemctl status nginx</code>.</p> <p> </p>"},{"location":"Tarea1_2/Tarea1_2/#2-creacion-de-la-carpeta-del-sitio-web","title":"2. Creaci\u00f3n de la carpeta del sitio web","text":"<p>Todos los archivos de Nginx se organizan en carpetas, usualmente en <code>/var/www</code>. Por lo tanto, creamos la carpeta para nuestro sitio web (en mi caso, la carpeta <code>Ryder</code>), y dentro de esta, la carpeta <code>html</code>. Comando: <code>sudo mkdir -p /var/www/nombre_web/html</code>.</p> <p>Una vez creada, clonamos el repositorio <code>https://github.com/cloudacademy/static-website-example</code>. Aclarar que debemos tener Git instalado en la m\u00e1quina para esto.</p> <p></p> <p>Adem\u00e1s, asignamos como propietario a <code>www-data</code> de las carpetas que acabamos de crear, con el comando <code>sudo chown -R www-data:www-data /var/www/ryder/html</code>.</p> <p>Y, tambi\u00e9n, le damos permisos para evitar errores con: <code>sudo chmod -R 755 /var/www/nombre_web</code>.</p> <p></p> <p>Para comprobar que Nginx funciona, abrimos el navegador de la m\u00e1quina virtual y vamos a <code>http://172.23.192.254</code> o a la IP asignada en ese momento (en mi caso, la <code>172.23.192.254</code>). Si todo ha ido bien, deber\u00eda mostrarse esto:</p> <p></p>"},{"location":"Tarea1_2/Tarea1_2/#3-configuracion-del-servidor-web-nginx","title":"3. Configuraci\u00f3n del servidor web Nginx","text":"<p>Para que Nginx muestre nuestra web, debemos crear un nuevo archivo dentro de la carpeta <code>sites-available</code> con el nombre de nuestra web, usando el siguiente comando: <code>sudo nano /etc/nginx/sites-available/ryder</code>.</p> <p>El contenido debe ser el siguiente:</p> <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name ryder;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p></p> <p>Despu\u00e9s, creamos un enlace simb\u00f3lico entre este sitio y los sitios habilitados con el comando: <code>sudo ln -s /etc/nginx/sites-available/ryder /etc/nginx/sites-enabled/</code>. Reiniciamos el servicio para aplicar los cambios con: <code>sudo systemctl restart nginx</code>.</p> <p></p>"},{"location":"Tarea1_2/Tarea1_2/#4-comprobaciones","title":"4. Comprobaciones","text":"<p>No contamos con un servidor DNS que resuelva las solicitudes de nombres a IPs. Para esto, en la m\u00e1quina f\u00edsica vamos a editar el archivo <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> para a\u00f1adir la l\u00ednea: <code>172.23.192.254 ryder</code>.</p> <p></p>"},{"location":"Tarea1_2/Tarea1_2/#5-comprobar-registros-del-servidor","title":"5. Comprobar registros del servidor","text":"<p>Comprobamos que las peticiones se est\u00e1n registrando en los archivos de logs, tanto correctas como incorrectas: - <code>/var/log/nginx/access.log</code> para solicitudes correctas. - <code>/var/log/nginx/error.log</code> para solicitudes incorrectas.</p> <p></p>"},{"location":"Tarea1_2/Tarea1_2/#6-ftp","title":"6. FTP","text":"<p>En este apartado, vamos a configurar el protocolo FTP para poder transferir archivos de la m\u00e1quina f\u00edsica a la virtual. Dado que FTP es un protocolo obsoleto, usaremos SFTP.</p> <p>Primero, debemos tener actualizada la m\u00e1quina. Luego, instalamos vsftpd con: <code>sudo apt-get install vsftpd</code>, y creamos la carpeta FTP para el usuario que utilicemos. En mi caso, el usuario es \"usuario\": <code>mkdir /home/usuario/ftp</code>.</p> <p></p> <p>Creamos los certificados de seguridad necesarios y realizamos el proceso de credenciales (los apartados se pueden dejar vac\u00edos).</p> <p></p> <p>A continuaci\u00f3n, editamos el archivo de configuraci\u00f3n de vsftpd: <code>sudo nano /etc/vsftpd.conf</code>, comentando las siguientes l\u00edneas:</p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p>Y las sustituimos por estas:</p> <pre><code>rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\nlocal_root=/home/usuario/ftp\n</code></pre> <p></p> <p>Para aplicar los cambios, reiniciamos el servicio con: <code>sudo systemctl restart --now vsftpd</code>.</p> <p></p> <p>El servicio SFTP ya est\u00e1 funcionando, pero para usarlo necesitamos un cliente FTP como FileZilla. Descargamos este programa en nuestra m\u00e1quina f\u00edsica. Para conectarnos, ponemos la IP del servidor (m\u00e1quina virtual), en mi caso la <code>172.23.192.254</code>, el usuario y la contrase\u00f1a habilitados (en mi caso, \"usuario\"), y el puerto 22 (ya que el 21 da problemas).</p> <p></p> <p>Nos dar\u00e1 un aviso debido al certificado usado por el servidor SFTP, pero como nosotros mismos hemos creado el servicio, podemos confiar en \u00e9l. Tras esto, podemos probar a transferir un archivo de la m\u00e1quina f\u00edsica a la virtual.</p> <p></p>"},{"location":"Tarea1_2/Tarea1_2/#7-https","title":"7. HTTPS","text":"<p>Para a\u00f1adir seguridad a las conexiones, pasando de usar HTTP a HTTPS, debemos hacer algunos cambios en cosas que ya hemos hecho antes. Lo primero es modificar el archivo en <code>sites-enabled</code> con: <code>sudo nano /etc/nginx/sites-enabled/ryder</code> y a\u00f1adir lo siguiente. Lo m\u00e1s importante son los certificados SSL.</p> <p>Peque\u00f1a aclaracion: debe ser <code>$server_name</code>. Es un peque\u00f1o error al tomar la captura que despues fue cambiado </p> <p>Luego, generamos los certificados que usamos en <code>sites-enabled/</code>. T\u00e9cnicamente, estos certificados no son v\u00e1lidos porque son autofirmados, pero para tener certificados v\u00e1lidos habr\u00eda que pagar, y en este caso podemos confiar en nosotros mismos.</p> <p></p> <p>Asignamos permisos a los certificados generados.</p> <p></p> <p>En la m\u00e1quina f\u00edsica debemos modificar el archivo hosts para resolver la petici\u00f3n DNS con nuestro nombre de direcci\u00f3n web y nuestra IP.</p> <p></p> <p>Ahora, desde la m\u00e1quina f\u00edsica podemos ver la p\u00e1gina <code>http://ryder.com</code>.</p> <p></p> <p>Para comprobar el funcionamiento de la versi\u00f3n HTTPS, movemos la web de ejemplo desde la carpeta <code>./ryder/html/static-website-example</code> a la carpeta <code>./ryder/</code>, y por \u00faltimo, borramos el directorio <code>./html/</code>. Tener mucho cuidado en este paso, ya que podemos romper la m\u00e1quina.</p> <p></p> <p>Hacemos un \u00faltimo test para comprobar que todo ha funcionado correctamente.</p> <p></p> <p>Si todo ha salido bien, en el navegador de nuestra m\u00e1quina f\u00edsica deber\u00eda aparecer un aviso en la p\u00e1gina <code>https://ryder.com</code>, ya que los certificados que utilizamos son autofirmados. Una vez pasemos el aviso, deber\u00edamos ver esta p\u00e1gina web.</p> <p></p> <p></p>"},{"location":"Tarea2_2/Tarea2_2/","title":"Pr\u00e1ctica 2.2","text":""},{"location":"Tarea2_2/Tarea2_2/#autenticacion-en-nginx","title":"Autenticaci\u00f3n en Nginx","text":""},{"location":"Tarea2_2/Tarea2_2/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea2_2/Tarea2_2/#1-introduccion-y-paquetes-necesarios","title":"1. Introducci\u00f3n y paquetes necesarios","text":"<p>Primero que nada debemos tener funcionando la Practica 2.1, en mi caso tuve que modificar el archivo host de mi maquina f\u00edsica para cambiar la IP </p> <p>Una vez que tenemos funcionando la practica anterior debemos comprobar que tenemos el paquete instalado de la herramienta OpenSSL, para crear las contrase\u00f1as cifradas. Este comando comprueba que lo tenemos instalado y si no, lo instala.</p> <pre><code>dpkg  -l  |  grep  openssl\n</code></pre> <p></p>"},{"location":"Tarea2_2/Tarea2_2/#2-creacion-de-usuarios-y-contrasenas-de-acceso-web","title":"2. Creaci\u00f3n de usuarios y contrase\u00f1as de acceso web","text":"<p>Vamos a crear 2 usuarios con sus dos respectivas contrase\u00f1as. estos usuarios tendr\u00e1n guardada su contrase\u00f1a de manera cifrada </p> <p>Para crear el usuario Javier usaremos este comando, indicando tambi\u00e9n donde se guarda la contrase\u00f1a</p> <pre><code>sudo  sh  -c  \"echo -n 'Javier:' &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p>con este le a\u00f1adimos una contrase\u00f1a al usuario anteriormente creado, pidiendo una contrase\u00f1a que despu\u00e9s ser\u00e1 cifrada por OpenSSL </p> <pre><code>sudo  sh  -c  \"openssl passwd -apr1 &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p></p> <p>Repetimos proceso con el usuario Rider</p> <pre><code>sudo  sh  -c  \"echo -n 'Rider:' &gt;&gt; /etc/nginx/.htpasswd\"\nsudo  sh  -c  \"openssl passwd -apr1 &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p></p> <p>Podemos comprobar que se han creado los usuarios correctamente y que la contrase\u00f1a esta totalmente cifrada </p> <p></p>"},{"location":"Tarea2_2/Tarea2_2/#3-configuracion-de-nginx-para-autentificacion-basica","title":"3.  Configuraci\u00f3n de Nginx para autentificaci\u00f3n b\u00e1sica","text":"<p>Para aplicar la autentificacion basica debemos hacer modificaciones en <code>sites-avalible/ryder</code>. Con el siguiente comando</p> <pre><code>sudo  nano  /etc/nginx/sites-available/nombre_web\n</code></pre> <p>Una vez aqui debemos a\u00f1adir 2 lineas a <code>location</code>. estas se encargaran de solicitar el usuario-contrase\u00f1a y contrastarlo con la lista de usuario-contrase\u00f1a que tenemos en el servidor. debemos a\u00f1adir las siguientes lineas</p> <pre><code>auth_basic  \"\u00c1rea restringida\";\nauth_basic_user_file  /etc/nginx/.htpasswd;\n</code></pre> <p>Quedando algo similar a esto</p> <p></p> <p>para acontinuacion reiniciar el servicio para aplicar el cambio</p> <p></p> <p>Tras esto si vamos a nuestra web <code>htpps://www.ryder.com</code>para acceder y visualizar la web primero debemos logearnos correctamente. debemos tener en cuenta que una vez introduzcamos credenciales validas se guardaran en las cookies del navegador, por lo que no lo volvera a pedir, si queremos repetir el proceso podemos hacer <code>ctrl + shift + r</code>, <code>ctrl + F5</code>, abrir una ventana privada en el navegador o borrar el historial</p> <p></p> <p>Para probar que no funciona si no ponemos credenciales validas podemos intentar logearnos con un usuario que no hemos creado, en mi caso pepe. debera darnos un error 403. como pepe no es un usuario autentificado nos redirige a la pagina del error</p> <p></p> <p>Para probar que si funciona, actualizamos la pagina, probaremos a logearnos con un usuario que si exista, en mi caso Javier. </p> <p></p> <p>como tanto el usuario como la contrase\u00f1a de Javier estan almacenadas en <code>.htpasswd</code> nos deja pasar y visualizar la web.</p> <p></p> <p>Ahora podemos comprobar el registro de accesos para comprobar que todo se ha registrado. Como podemos ver esta registrado que se ha intentado acceder tanto con pepe como con Javier</p> <pre><code>sudo nano /var/log/nginx/access.log\n</code></pre> <p></p> <p>pero si vamos al registro de errores veremos que solo hay un registro, indicando que el usuario pepe no esta en <code>.htpasswd</code></p> <pre><code>sudo nano /var/log/nginx/error.log\n</code></pre> <p></p>"},{"location":"Tarea2_2/Tarea2_2/#31-autentificacion-en-contactohtml","title":"3.1. Autentificaci\u00f3n en contacto.html","text":"<p>Para poder autentificarnos en un apartado concreto de la web he tenido que hacer algunas modificaciones al <code>index.html</code> dado que este index trae todos los apartados en un mismo archivo y por limitaciones no podemos autentificar por apartados si todo esta en el mismo archivo.</p> <p>Para solucionar esto, antes de modificar la configuraci\u00f3n, debemos crear una copia de <code>index.hmtl</code> llamada (en mi caso) <code>contacto.html</code>. Este <code>contacto.html</code> es id\u00e9ntico a index, con la diferencia de que hemos borrado todos los <code>&lt;articulos&gt;</code> que no sean el de contacto. Considero que esta explicaci\u00f3n es suficiente.</p> <p>Una vez aclarado y creado <code>contacto.html</code> podemos proceder. Debemos modiciar una vez m\u00e1s <code>sites-available/ryder</code>.  Debemos comentar las siguientes lienas: </p> <pre><code>#   auth_basic  \"\u00c1rea restringida\";\n#   auth_basic_user_file  /etc/nginx/.htpasswd;\n</code></pre> <p>Para a\u00f1adir un nuevo <code>location</code> espec\u00edfico para <code>contacto.html</code> ahora al acceder a la web principal no nos pide contrase\u00f1a. Pero para entrar al apartado Contacto nos obliga a autentificarnos</p> <pre><code>location /contacto.html { \n    auth_basic \"Area restringida\"; \n    auth_basic_user_file /etc/nginx/ .htpasswd;\n}\n</code></pre> <p>debiendo quedar algo similar a esto</p> <p></p> <p>Por \u00faltimo reiniciar el servicio antes de poder empezar a probar lo</p> <p></p> <p>Ahora que esta reiniciado servicio nos dirigimos a la direccion <code>https://www.ryder.com/contacto.html</code> y como podemos ver nos pide autentificaci\u00f3n antes de mostrar el formulario de contacto</p> <p></p>"},{"location":"Tarea2_2/Tarea2_2/#4-autentificacion-basica-con-restriccion-por-acceso-por-ip","title":"4. Autentificaci\u00f3n b\u00e1sica con restricci\u00f3n por acceso por IP","text":"<p>Para realizar este apartado no es necesario deshacer el apartado 3.1.</p>"},{"location":"Tarea2_2/Tarea2_2/#41-denegar-una-ip","title":"4.1 Denegar una IP","text":"<p>Para denegar el acceso a una IP concreta debemos modificar una vez mas <code>sites-available/ryder</code>. Descomentamos las lineas comentadas del <code>location</code> y a\u00f1adimos la linea <code>deny IP</code> esta ip sera la que no podra acceder a la web, probaremos con la IP de la maquina fisica. Tambien se podria usar <code>deny all</code> para bloquear todas las IPs</p> <pre><code>deny 172.30.144.1;\nauth_basic \"Area restringida\"; \nauth_basic_user_file /etc/nginx/ .htpasswd;\n</code></pre> <p></p> <p>tras esto reiniciamos el servicio</p> <p></p> <p>si ahora, desde la maquina fisica, intentamos acceder a la web nos dar\u00e1 un error 403. pues no tenemos permiso para acceder con esta ip</p> <p></p>"},{"location":"Tarea2_2/Tarea2_2/#42-permitir-ips","title":"4.2. Permitir IPs","text":"<p>Para permitir IPs concretas haremos el mismo proceso que el anterior pero utilizando <code>allow IP</code>. En solitario, sin <code>deny all</code>, es in\u00fatil en pero ser\u00e1 aclarado en el siguiente punto. <code>allow ip</code> o <code>allow all</code> permite el acceso a las IPs indicadas, al contrario que  <code>deny</code></p> <pre><code>satisfy all;\nallow 172.30.144.1;\nauth_basic \"Area restringida\"; \nauth_basic_user_file /etc/nginx/ .htpasswd;\n</code></pre> <p></p> <p>tras esto reiniciamos el servicio</p> <p></p> <p>si ahora, desde la m\u00e1quina f\u00edsica, intentamos acceder a la web, nos pedir\u00e1 el loguearnos, se explica en el siguiente punto</p> <p></p>"},{"location":"Tarea2_2/Tarea2_2/#43-satisfy-all","title":"4.3. Satisfy all","text":"<p>En el apartado anterior he a\u00f1adido <code>satisfy all;</code>, esta configuraci\u00f3n se utiliza para permitir el uso cambiando de una ip valida (con <code>allow</code> o <code>deny</code>) y ademas ser un usuario valido. si una de las dos validaciones no es correcta el usuario no puede acceder a la web.</p> <p>en cambio si usamos <code>satisfy any;</code> mientras el usuario o la ip sean validas el usuario podr\u00e1 acceder a la web</p>"},{"location":"Tarea2_2/Tarea2_2/#5-cuestiones","title":"5. Cuestiones","text":""},{"location":"Tarea2_2/Tarea2_2/#51-cuestion-1","title":"5.1. Cuestion 1:","text":"<p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio <code>web_muy_guay</code> de mi sitio web, equivoc\u00e1ndome al poner el usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>location /web_muy_guay {\n#...\n    satisfy all;    \n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n    deny  all;\n    auth_basic \"Cuesti\u00f3n final 1\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>El usuario no podra acceder a la web. Tiene una IP permitida dentro de la configuracion, pero necesita tener tanto una IP valida como autentificarse correctamente. esto debido a la presencia de  <code>satisfy all;</code></p>"},{"location":"Tarea2_2/Tarea2_2/#52-cuestion-2","title":"5.2. Cuesti\u00f3n 2","text":"<p>ask \"Cuesti\u00f3n 1\" Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuari y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>location /web_muy_guay {\n    #...\n    satisfy all;    \n    deny  all;\n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 2: The revenge\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>En esta ocasi\u00f3n si se podr\u00e1 acceder a la web pues se utiliza una IP admitida y una autentificaci\u00f3n correcta.</p>"},{"location":"Tarea2_2/Tarea2_2/#53-cuestion-3","title":"5.3. Cuesti\u00f3n 3","text":"<p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>location /web_muy_guay {\n#...\n    satisfy any;    \n    deny  172.1.10.6;\n    deny 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 3: The final combat\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>Podr\u00e1 acceder. dado que la presencia de <code>satisfy any</code> indica que teniendo una ip valida o introduciendo unas credenciales correctas podemos acceder a la web</p>"},{"location":"Tarea2_2/Tarea2_2/#54-cuestion-4","title":"5.4. Cuesti\u00f3n 4","text":"<p>A lo mejor no sab\u00e9is que tengo una web para documentar todas mis excursiones espaciales con Jeff, es esta: Jeff Bezos y yo</p> <p>Supongamos que quiero restringir el acceso al directorio de proyectos porque es muy secreto, eso quiere decir a\u00f1adir autenticaci\u00f3n b\u00e1sica a la URL:Proyectos</p> <p>Completa la configuraci\u00f3n para conseguirlo:</p> <p>original:</p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    root /var/www/freewebsitetemplates.com/preview/space-science;\n    index index.html index.htm index.nginx-debian.html;\n    server_name freewebsitetemplates.com www.freewebsitetemplates.com;\n    location              {\n\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p>solucionado:</p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    root /var/www/freewebsitetemplates.com/preview/space-science;\n    index index.html index.htm index.nginx-debian.html;\n    server_name freewebsitetemplates.com www.freewebsitetemplates.com;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    location /Proyectos/ {\n        auth_basic \"Restricted Area\"; # Mensaje que ver\u00e1 el usuario al intentar acceder\n        auth_basic_user_file /etc/nginx/.htpasswd; # Ruta del archivo de contrase\u00f1as\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre>"},{"location":"Tarea2_3/Tarea2_3/","title":"Pr\u00e1ctica 2.3","text":""},{"location":"Tarea2_3/Tarea2_3/#proxy-inverso-con-nginx","title":"Proxy inverso con Nginx","text":""},{"location":"Tarea2_3/Tarea2_3/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea2_3/Tarea2_3/#0-preparativos","title":"0. Preparativos","text":"<p>Antes de empezar debemos tener 2 maquinas virtuales. podemos clonar la maquina de las practicas anteriores cambiando la mac. Tambi\u00e9n podemos cambiar el nombre de la maquina pero no es necesario en si, solo seria para tenerlo mas claro</p> <p></p> <p>Debemos comprobar el archivo host de la maquina fisica. debido a que podria haber cambiado la ip de la maquina virtual que utiliza el proxy. Tambien que debemos poner la redireccion manual en el archivo host de la maquina fisica.</p> <p>nota: he quitado el .com del enlace porque me daba problemas, parece que era una direccion ya cogida</p> <p>lo importante del archivo host es que debe tener la ip de la maquina PROXY y una direccion web</p> <p></p>"},{"location":"Tarea2_3/Tarea2_3/#1-nginx-servidor-web","title":"1. Nginx servidor web","text":"<p>Vamos a configurar la maquina que hace de cliente en la relaci\u00f3n proxy inverso. Esta maquina es la que almacena la pagina web que despu\u00e9s visualizaremos a traves del proxy inverso.</p> <p>Esta maquina es servidor2, la clonacion de servidor1. Por tanto primero debemos eliminar el enlace simbolico entre la web anterior (ryder.com) y crear uno nuevo con servidorweb, que es la que vamos a usar en esta practica. </p> <p>el archivo de configuracion de servidorweb es el siguiente:</p> <p></p> <p>el comamndo para eliminar el enlace simbolico es, dentro de la carpeta <code>sites-enabled</code> el siguiente:</p> <pre><code>unlink ryder\n</code></pre> <p>Ahora creamos el enlace simbolico con el archivo de configuracion de servidorweb</p> <pre><code>ln -s /etc/nginx/sites-available/servidorweb /etc/nginx/sites-enabled/\n</code></pre> <p></p>"},{"location":"Tarea2_3/Tarea2_3/#2-configuracion-del-proxy-inverso","title":"2. Configuraci\u00f3n del proxy inverso","text":"<p>Antes de empezar a modificar el arhivo de configuracion debemos a\u00f1adir la ip de la maquina servidorweb en el archivo host de la maquina proxy. (similar a como lo hemos echo en la maquina fisica)</p> <p></p> <p>ahora, creamos el archivo de configuracion de nginx en la maquina proxy. Este archivo es el que se encarga de redirigir las peticiones a la maquina servidorweb. </p> <p>el contenido del archivo de configuracion de nginx en la maquina proxy es el siguiente:</p> <pre><code>\nserver { \n    listen 80; \n    server_name prproxy www.prproxy; \n    location / { \n    proxy_pass http://webserver; \n    } \n} \n\n</code></pre> <p></p> <p>Tambien nos aseguramos de eliminar el enlace simbolico de ryder.como y crear uno nuevo con el archivo de configuracion de proxy</p> <pre><code>unlink ryder\n</code></pre> <pre><code>ln -s /etc/nginx/sites-available/prproxy /etc/nginx/sites-enabled/\n</code></pre> <p></p>"},{"location":"Tarea2_3/Tarea2_3/#3-comprobaciones","title":"3. Comprobaciones","text":"<p>Ahora, en la maquina fisica, abrimos un navegador y escribimos la direccion web que hemos puesto en el archivo host de la maquina fisica. y como podemos ver, la pagina web que hemos configurado en la maquina servidorweb se muestra en el navegador de la maquina fisica.</p> <p></p>"},{"location":"Tarea2_3/Tarea2_3/#4-cabeceras","title":"4. Cabeceras","text":"<p>Ahora a\u00f1adimos unas cabeceras, que se mostraran cuando accedamos a la web desde la maquina fisica.</p> <pre><code>add_header Host prproxy_javier;\n</code></pre> <p></p> <p>si vamos al navegador podemos ver que efectivamente esta la cabecera del proxy</p> <p></p> <p>y su ahora a\u00f1adimos una al archivo de configuracion de servidorweb</p> <pre><code>add_header Host servidor_web_Ryder;\n</code></pre> <p></p> <p>y volvemos a acceder a la web desde la maquina fisica, podemos ver que tambien se muestra la cabecera del servidorweb</p> <p></p> <p></p>"},{"location":"Tarea2_4/Tarea2_4/","title":"Pr\u00e1ctica 2.4","text":""},{"location":"Tarea2_4/Tarea2_4/#balanceo-de-carga-con-proxy-inverso-en-nginx","title":"Balanceo de carga con proxy inverso en Nginx","text":""},{"location":"Tarea2_4/Tarea2_4/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea2_4/Tarea2_4/#0-preparativos","title":"0. Preparativos","text":"<p>Antes de empezar debemos tener 3 maquinas virtuales. podemos clonar la maquina de las practicas anteriores cambiando la mac. Tambi\u00e9n podemos cambiar el nombre de la maquina pero no es necesario en si, solo seria para tenerlo mas claro</p> <p></p> <p>Tambien debemos asegurarnos de que nuestra maquina proxy tiene acceso a las otras dos maquinas. Para ello debemos a\u00f1adir las ips de las maquinas servidor1 y servidor2 en el archivo host de la maquina proxy.</p> <p>Debemos revisar que las ip son las correctas. porque al ser fijas pueden cambiar. Tambi\u00e9n debemos comprobar que el archivo host de la maquina f\u00edsica tiene la redirection manual a la maquina proxy.</p> <p></p>"},{"location":"Tarea2_4/Tarea2_4/#1-nginx-servidor-web-2","title":"1. Nginx servidor web 2","text":"<p>Partiendo de que hemos clonado una maquina con servidorweb funcionando. solo tenemos que modificar ese archivo. no es necesario cambiarle el nombre.</p> <p>El archivo de configuraci\u00f3n de servidorweb es el siguiente:</p> <p> </p>"},{"location":"Tarea2_4/Tarea2_4/#2-configuracion-del-proxy-inverso","title":"2. Configuraci\u00f3n del proxy inverso","text":"<p>Ahora debemos a\u00f1adir en sites-available de prproxy  el siguiente fragmento de configuraci\u00f3n:</p> <p>este fragmento indica a que webserver se van a redirigir las peticiones. el condicional es un aleatorio</p> <pre><code>upstream grupo_ryder {\n    random;\n    server webserver:443;\n    server webserver2:443;\n}\n\nlocation / {\n    proxy_pass https://grupo_ryder;\n}\n</code></pre> <p></p>"},{"location":"Tarea2_4/Tarea2_4/#3-comprobaciones-y-resultado","title":"3. Comprobaciones y resultado","text":"<p>ahora si vamos a la web http://prproxy nos redirigir\u00e1 de manera aleatoria a uno de los dos deserver.</p> <p>podemos ver que servidor esta atendiendo la petici\u00f3n gracias a las cabeceras que hemos configurado</p> <p> </p>"},{"location":"Tarea2_5/Tarea2_5/","title":"Pr\u00e1ctica 2.5","text":""},{"location":"Tarea2_5/Tarea2_5/#proxy-inverso-y-balanceo-de-carga-con-ssl-en-nginx","title":"Proxy inverso y balanceo de carga con SSL en NGINX","text":""},{"location":"Tarea2_5/Tarea2_5/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea2_5/Tarea2_5/#1-generar-permisos-ssl","title":"1. Generar permisos SSL","text":"<p>Primero debemos crear una carpeta en la maquina proxy para guardar los certificados SSL. En la carpeta <code>/etc/nginx/</code> creamos una carpeta llamada <code>ssl</code> </p> <p></p> <p>Ahora creamos los certificados SSL con el siguiente comando:</p> <pre><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt\n</code></pre> <p></p> <p>y rellenamos los campos que nos pide el comando. no son necesarios todos.</p> <p></p>"},{"location":"Tarea2_5/Tarea2_5/#2-configuracion-del-proxy-inverso","title":"2. Configuraci\u00f3n del proxy inverso","text":"<p>Ahora modificamos el archivo de configuraci\u00f3n de prproxy. A\u00f1adimos las siguientes lineas:</p> <pre><code>server { \n    listen 443 ssl; \n    server_name prproxy www.prproxy; \n    ssl_certificate /etc/nginx/ssl/nginx.crt; \n    ssl_certificate_key /etc/nginx/ssl/nginx.key; \n    ssl_protocols TLSv1.3;\n    ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256';\n    location / { \n    proxy_pass http://webserver; \n    add_header Host prproxy;\n    } \n} \n</code></pre> <p></p> <p>Ahora si vamos al navegador y vamos la direcci\u00f3n <code>https://prproxy</code> podemos ir a ver los datos del certificado ssl que hemos creado.</p> <p></p>"},{"location":"Tarea2_5/Tarea2_5/#3-anadir-redireccion-a-la-web","title":"3. A\u00f1adir redirecci\u00f3n a la web","text":"<p>Ahora a\u00f1adimos una redirecci\u00f3n a la web. Para ello a\u00f1adimos las siguientes lineas al archivo de configuraci\u00f3n de prproxy:</p> <pre><code>server { \n    listen 80; \n    server_name prproxy www.prproxy; \n    access_log /var/log/nginx/http_access.log;\n    return 301 https://prpoxy$request_uri; \n} \n</code></pre> <p></p> <p>ahora si vamos al navegador y escribimos la direcci\u00f3n <code>http://prproxy</code> nos redirige a la direcci\u00f3n <code>https://prproxy</code></p> <p></p>"},{"location":"Tarea2_5/Tarea2_5/#4-cuesciones","title":"4. Cuesciones","text":""},{"location":"Tarea2_5/Tarea2_5/#41-cuestion-1","title":"4.1 Cuestion 1","text":"<p>Hemos configurado nuestro proxy inverso con todo lo que nos hace falta pero no nos funciona y da un error del tipo This site can't provide a secure connection, ERR_SSL_PROTOCOL_ERROR.</p> <p>Dentro de nuestro server block tenemos esto:</p> <pre><code>server {\n    listen 443;\n    ssl_certificate /etc/nginx/ssl/enrico-berlinguer/server.crt;\n    ssl_certificate_key /etc/nginx/ssl/enrico-berlinguer/server.key;\n    ssl_protocols TLSv1.3;\n    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n    server_name enrico-berlinguer;\n    access_log /var/log/nginx/https_access.log;\n\n    location / {\n        proxy_pass http://red-party;\n        }\n    }\n</code></pre> <p>Esto puede ser debido a que el navegador no confia en el certificado SSL que hemos creado. Para solucionar esto debemos a\u00f1adir el certificado a la lista de certificados de confianza del navegador. Para ello, en el navegador, vamos a la configuraci\u00f3n y buscamos la opci\u00f3n de certificados. Ah\u00ed a\u00f1adimos el certificado que hemos creado.</p>"},{"location":"Tarea2_5/Tarea2_5/#42-cuestion-2","title":"4.2 Cuestion 2","text":"<p>Imaginad que intentamos acceder a nuestro sitio web HTTPS y nos encontramos con el siguiente error:</p> <p></p> <p>NET::ERR_CERT_REVOKED</p> <p>Investigad qu\u00e9 est\u00e1 pasando y como se ha de solucionar.</p> <p>Este error se produce cuando el certificado SSL que hemos creado ha sido revocado. Esto puede ser debido a que el certificado ha sido robado o que el certificado ha sido creado con una autoridad de certificaci\u00f3n que no es de confianza. Para solucionar este problema debemos crear un nuevo certificado SSL y a\u00f1adirlo a la lista de certificados de confianza del navegador. Para ello, en el navegador, vamos a la configuraci\u00f3n y buscamos la opci\u00f3n de certificados. Ah\u00ed a\u00f1adimos el certificado que hemos creado.</p>"},{"location":"Tarea3_1/Tarea3_1/","title":"Pr\u00e1ctica 3.1","text":""},{"location":"Tarea3_1/Tarea3_1/#instalacion-de-tomcat","title":"Instalaci\u00f3n de Tomcat","text":""},{"location":"Tarea3_1/Tarea3_1/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea3_1/Tarea3_1/#1-instalacion-de-tomcat","title":"1. Instalaci\u00f3n de Tomcat","text":"<p>Primero debemos instalar el servidor Tomcat. Para ello ejecutamos el siguiente comando:</p> <pre><code>sudo apt install tomcat10 tomcat10-admin\n</code></pre> <p></p> <p>Tambien en caso de no tenerlo instalado instalamos java </p> <pre><code>sudo apt install default-jdk\n</code></pre> <p> </p>"},{"location":"Tarea3_1/Tarea3_1/#2-configuracion-de-tomcat","title":"2. Configuraci\u00f3n de Tomcat","text":"<p>comprobamos el puerto que esta en escucha con el comando:</p> <pre><code>ss -tln\n</code></pre> <p></p> <p>Ahora modificamos el archivo de configuraci\u00f3n de Tomcat. A\u00f1adimos las siguientes lineas:</p> <pre><code>sudo nano /etc/tomcat10/server.xml\n</code></pre> <pre><code>&lt;user username=\"manager\" password=\"usuario\" roles=\"manager-gui\"/&gt;\n</code></pre> <p></p> <p>Reiniciamos el servicio de Tomcat con el comando:</p> <pre><code>sudo systemctl restart tomcat10\n</code></pre> <p>compobamos que el servicio esta en ejecuci\u00f3n con el comando:</p> <pre><code>sudo systemctl status tomcat10\n</code></pre> <p></p>"},{"location":"Tarea3_1/Tarea3_1/#3-acceso-a-la-interfaz-de-administracion","title":"3. Acceso a la interfaz de administraci\u00f3n","text":"<p>Ahora si vamos al navegador y vamos la direcci\u00f3n <code>http://localhost:8080/manager/html</code> podemos acceder a la interfaz de administraci\u00f3n de Tomcat. Para acceder, introducimos el usuario y contrase\u00f1a que hemos configurado en el archivo de configuraci\u00f3n.</p> <p></p>"},{"location":"Tarea3_1/Tarea3_1/#4-despliegue-de-una-aplicacion","title":"4. Despliegue de una aplicaci\u00f3n","text":"<p>En la interfaz de administraci\u00f3n de Tomcat, en la secci\u00f3n de <code>WAR file to deploy</code>, seleccionamos el archivo <code>.war</code> que queremos desplegar y pulsamos el bot\u00f3n de <code>Deploy</code>.</p> <p></p> <p>Una vez desplegado en la misma web <code>http://localhost:8080/manager/html</code> veremos que se ha cargado correctamente la aplicacion. Damos click en el nombre de la aplicacion y nos llevara a la pagina de inicio de la aplicacion.</p> <p></p> <p>La aplicaci\u00f3n funcionando correctamente.</p> <p></p>"},{"location":"Tarea3_1/Tarea3_1/#5-instalacion-de-maven","title":"5. Instalaci\u00f3n de Maven","text":"<p>Instalamos Maven con el siguiente comando:</p> <pre><code>sudo apt install maven\n</code></pre> <p></p> <p>y con el siguiente comando comprobamos la versi\u00f3n de Maven:</p> <pre><code>mvn --v\n</code></pre> <p></p> <p>Ahora que esta funcionando reinicia el servicio de Tomcat con el comando:</p> <pre><code>sudo systemctl restart tomcat10\n</code></pre> <p>y chequeamos que el servicio esta en ejecuci\u00f3n con el comando:</p> <pre><code>sudo systemctl status tomcat10\n</code></pre> <p></p>"},{"location":"Tarea3_1/Tarea3_1/#6-configuracion-de-maven","title":"6. Configuraci\u00f3n de Maven","text":"<p>Ahora modificamos el archivo de configuraci\u00f3n de Maven. A\u00f1adimos las siguientes lineas dentro de la etiqueta <code>&lt;servers&gt;</code>:</p> <pre><code>sudo nano /etc/maven/settings.xml\n</code></pre> <pre><code>&lt;servers&gt;\n    &lt;server&gt;\n        &lt;id&gt;TomcatP3.1&lt;/id&gt;\n        &lt;username&gt;ryder-deploy&lt;/username&gt;\n        &lt;password&gt;usuario&lt;/password&gt;\n    &lt;/server&gt;\n&lt;/servers&gt;\n</code></pre> <p></p>"},{"location":"Tarea3_1/Tarea3_1/#7-despliegue-de-una-aplicacion-con-maven","title":"7. Despliegue de una aplicaci\u00f3n con Maven","text":"<p>Primero debemos a\u00f1adir un usuario en Tomcat. Para ello modificamos el archivo de configuraci\u00f3n de Tomcat. A\u00f1adimos las siguientes lineas:</p> <pre><code>sudo nano /etc/tomcat10/tomcat-users.xml\n</code></pre> <pre><code>&lt;user username=\"ryder-deploy\" password=\"usuario\" roles=\"manager-script\"/&gt;\n</code></pre> <p></p> <p>Debemos bajarnos un proyecto de ejemplo de Maven. en mi caso he usado un juego de piedra papel o tijera. Utilizando <code>git clone</code> descargamos el proyecto.</p> <p>Una vez con el proyecto descargado, nos movemos a la carpeta del proyecto y ejecutamos el siguiente comando:</p> <pre><code>sudo nano /ruta/del/proyecto/pom.xml\n</code></pre> <p>y a\u00f1adimos las siguientes lineas dentro de las etiquetas <code>&lt;build&gt;</code> y <code>&lt;plugins&gt;</code>:</p> <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n    &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.2&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt;\n        &lt;server&gt;TomcatP3.1&lt;/server&gt;\n        &lt;path&gt;/ryderJuego&lt;/path&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <p></p> <p>ahora podemos probar que maven esta funcionando correctamente con el comando:</p> <pre><code>mvn tomcat7:deploy\n</code></pre> <p></p> <p>y si volvemos a la interfaz de administraci\u00f3n de Tomcat, veremos que se ha desplegado la aplicaci\u00f3n correctamente.</p> <p></p> <p>y la aplicaci\u00f3n funcionando correctamente.</p> <p></p>"},{"location":"Tarea3_2/Tarea3_2/","title":"Pr\u00e1ctica 3.2","text":""},{"location":"Tarea3_2/Tarea3_2/#despliegue-de-aplicaciones-con-node-express-y-en-netlify","title":"Despliegue de aplicaciones con Node Express y en Netlify","text":""},{"location":"Tarea3_2/Tarea3_2/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea3_2/Tarea3_2/#1-creacion-de-una-aplicacion-react","title":"1. Creaci\u00f3n de una aplicaci\u00f3n React","text":"<p>Lo primero que debemos hacer es crear una aplicaci\u00f3n React. El c\u00f3digo de la aplicaci\u00f3n ha sido facilitado. los archivos han sido guardados en la correspondiente carpeta de proyecto. </p> <p>a continuaci\u00f3n inicializamos node.js con el comando:</p> <pre><code>npm init \n</code></pre> <p></p> <p>ahora ejecutamos la aplicaci\u00f3n con el comando:</p> <pre><code>node aplicacion.js\n</code></pre> <p></p> <p>y como podemos ver la aplicaci\u00f3n se ejecuta correctamente.</p> <p></p>"},{"location":"Tarea3_2/Tarea3_2/#2-despliegue-de-la-aplicacion-en-netlify","title":"2. Despliegue de la aplicaci\u00f3n en Netlify","text":"<p>En una nueva carpeta de proyecto, clonamos de github el repositorio para realizar la practica. Nota, inicializar el reposititrio en la carpeta correcta</p> <p></p> <p>Ahora debemos instalar las dependencias de la aplicaci\u00f3n dentro de la carpeta con el comando:</p> <pre><code>npm install netlify-cli -g\n</code></pre> <p></p> <p>Ahora debemos loguearnos en netlify con el comando. pero no debemos iniciar sesion con github</p> <pre><code>netlify login\n</code></pre> <p></p> <p>Ahora debemos desplegar la aplicaci\u00f3n con el comando:</p> <pre><code>netlify deploy\n</code></pre> <p> </p> <p>con el enlace que nos proporciona netlify podemos acceder a la aplicaci\u00f3n desplegada.</p> <p></p> <p>y como podemos ver la aplicaci\u00f3n se ha desplegado correctamente.</p>"},{"location":"Tarea3_2/Tarea3_2/#3-proceso-de-despliegue-en-netlify","title":"3. Proceso de despliegue en Netlify","text":"<p>En la pagina de netlify, debemos conseguir un token de autenticaci\u00f3n para poder desplegar la aplicaci\u00f3n. con el siguiente comando podemos aplicar el token en la terminal.</p> <p></p> <p>Ahora debemos borrar la aplicaci\u00f3n que hemos creado antes para evitar conflictos con el despliegue de la nueva aplicaci\u00f3n.</p> <p></p> <p>y ademas borramos la carpeta de la aplicaci\u00f3n que hemos creado antes.</p> <p></p> <p>ahora nos descargamos el repositorio de la aplicaci\u00f3n que vamos a desplegar en netlify en formaoto .zip con el siguiente comando</p> <pre><code>wget https://github.com/StackAbuse/color-shades-generator/archive/refs/heads/main.zip\n</code></pre> <p></p> <p>Creamos la carpeta de la aplicaci\u00f3n y descomprimimos el archivo .zip en la carpeta con el siguiente comando. Atencion a que se descomprime en la carpeta correcta.</p> <p></p> <p>Tambien debemos crear un repositorio en github para poder desplegar la aplicaci\u00f3n en netlify. Donde debemos subir el contenido de la carpeta de la aplicaci\u00f3n.</p> <p></p> <p>Ahora debemos enlazar github con netlify para poder desplegar la aplicaci\u00f3n.</p> <p> </p> <p>Debemos enlazarlo exclusivamente con el repositorio de la aplicaci\u00f3n.</p> <p></p> <p></p> <p>Ahora vamos a desplegar la aplicaci\u00f3n en netlify dandole nombre, no necesitamos modificar nada </p> <p></p> <p>desplegamos la aplicaci\u00f3n</p> <p></p> <p>tras unos minutos podremos acceder a la aplicaci\u00f3n desplegada en netlify.</p> <p> </p> <p>por ultimo modificamos robots.txt para que no se indexe la pagina en los motores de busqueda.</p> <p> </p>"},{"location":"Tarea3_3/Tarea3_3/","title":"Pr\u00e1ctica 3.3","text":""},{"location":"Tarea3_3/Tarea3_3/#despliegue-de-una-aplicacion-flask-python","title":"Despliegue de una aplicaci\u00f3n Flask (Python)","text":""},{"location":"Tarea3_3/Tarea3_3/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea3_3/Tarea3_3/#0-preparativos","title":"0. Preparativos","text":"<p>Es necesario tener instalado: - Nginx - Gunicorn - Pipenv  </p> <p> </p>"},{"location":"Tarea3_3/Tarea3_3/#1-creacion-de-una-aplicacion-con-flask","title":"1. Creaci\u00f3n de una aplicaci\u00f3n con Flask","text":"<p>Primero es necesario crear una carpeta para nuestra aplicaci\u00f3n y acceder a ella. Adem\u00e1s, darle los permisos necesarios y privilegios adecuados.  </p> <p> </p> <p>Dentro de esta carpeta, creamos el archivo oculto <code>.env</code> con el siguiente contenido:  </p> <pre><code>FLASK_APP=wsgi.py  \nFLASK_ENV=production  \n</code></pre> <p> </p>"},{"location":"Tarea3_3/Tarea3_3/#2-instalacion-de-flask","title":"2. Instalaci\u00f3n de Flask","text":"<p>Abrimos la consola de pipenv con el comando <code>pipenv shell</code> y instalamos Flask con el comando <code>pipenv install flask gunicorn</code>.  </p> <p> </p> <p> </p>"},{"location":"Tarea3_3/Tarea3_3/#3-creacion-de-la-aplicacion","title":"3. Creaci\u00f3n de la aplicaci\u00f3n","text":"<p>Creamos una aplicaci\u00f3n gen\u00e9rica para probar el funcionamiento de Flask.  </p> <p> </p> <p>Tambi\u00e9n creamos el archivo <code>wsgi.py</code> con el siguiente contenido:  </p> <p> </p> <p> </p> <p>Usamos <code>flask run --host '0.0.0.0'</code> para probar la aplicaci\u00f3n en el navegador.  </p> <p> </p> <p>Buscamos la IP de la m\u00e1quina con el comando <code>ip a</code> y accedemos a la aplicaci\u00f3n con la IP y el puerto 5000 desde el navegador.  </p> <p> </p>"},{"location":"Tarea3_3/Tarea3_3/#4-configuracion-de-gunicorn","title":"4. Configuraci\u00f3n de Gunicorn","text":"<p>Con <code>gunicorn --workers 2 wsgi:app</code>, creamos un servidor de aplicaciones en el puerto 8000.  </p> <p> </p> <p>Tambi\u00e9n anotamos la ruta de Gunicorn con <code>which gunicorn</code> para usarla en el archivo de configuraci\u00f3n de Nginx.  </p> <p> </p> <p>Desactivamos el entorno virtual con <code>deactivate</code>.  </p> <p> </p>"},{"location":"Tarea3_3/Tarea3_3/#5-configuracion-de-nginx","title":"5. Configuraci\u00f3n de Nginx","text":"<p>Iniciamos el servicio de Nginx.  </p> <p> </p> <p>Creamos el archivo systemd para Gunicorn con <code>sudo nano /etc/systemd/system/gunicorn.service</code> y a\u00f1adimos el siguiente contenido:  </p> <p> </p> <p>Lo activamos con los comandos:  </p> <pre><code>systemctl enable flask_app.service  \nsystemctl start flask_app.service  \nsystemctl status flask_app.service  \n</code></pre> <p> </p> <p>Ahora creamos el archivo de configuraci\u00f3n de Nginx con <code>sudo nano /etc/nginx/sites-available/flask_ryder</code> y a\u00f1adimos el siguiente contenido:  </p> <p> </p> <p>Lo activamos con los comandos:  </p> <pre><code>ln -s /etc/nginx/sites-available/flask_ryder /etc/nginx/sites-enabled  \nsystemctl restart nginx  \n</code></pre> <p> </p> <p> </p> <p>A\u00f1adimos la IP de la m\u00e1quina en el archivo de hosts con <code>sudo nano /etc/hosts</code> y agregamos la IP junto con el nombre del dominio.  </p> <p> </p> <p>Accedemos a la aplicaci\u00f3n con el nombre del dominio en el navegador.  </p> <p> </p>"},{"location":"Tarea3_3/Tarea3_3/#6-repetir-con-un-repositorio-de-github","title":"6. Repetir con un repositorio de GitHub","text":"<p>Clonamos el repositorio de GitHub con el comando <code>git clone</code>.  </p> <p> </p> <p>Volvemos a crear el entorno virtual con <code>pipenv shell</code> y ejecutamos <code>pipenv install</code> para instalar las dependencias. creamos el archivo <code>.env</code> con el contenido necesario y ejecutamos <code>gunicorn --workers 2 wsgi:app</code> para iniciar el servidor de aplicaciones.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Para probar la aplicaci\u00f3n en el navegador ejecutamos el siguiente comando:</p> <p></p> <p>y vemos que esta funcionando correctamente en el puerto 5000</p>"},{"location":"Tarea3_3/Tarea3_3/#_1","title":"Pr\u00e1ctica 3.3","text":""},{"location":"Tarea3_3/Tarea3_3/#7-configuracion-de-gunicorn-y-nginx-con-el-nuevo-proyecto","title":"7. Configuraci\u00f3n de Gunicorn y Nginx con el nuevo proyecto","text":"<p>anotamos la ruta de Gunicorn con <code>which gunicorn</code> para usarla en el archivo de configuraci\u00f3n de Nginx.</p> <p></p> <p></p> <p>Creamos el archivo de configuraci\u00f3n de Gunicorn con <code>sudo nano /etc/systemd/system/flask_raul.service</code> y a\u00f1adimos el siguiente contenido:</p> <p></p> <p>Ahora creamos el archivo de configuraci\u00f3n de Nginx </p> <p></p> <p></p> <p></p> <p>Tambien a\u00f1adimos el nombre del dominio en el archivo de hosts con <code>sudo nano /etc/hosts</code> y agregamos la IP junto con el nombre del dominio.</p> <p></p> <p>y porfin, podemos ver que la aplicacion esta funcionando correctamente en el navegador</p> <p></p>"},{"location":"Tarea3_4/Tarea3_2/","title":"Pr\u00e1ctica 3.2","text":""},{"location":"Tarea3_4/Tarea3_2/#despliegue-de-aplicaciones-con-node-express-y-en-netlify","title":"Despliegue de aplicaciones con Node Express y en Netlify","text":""},{"location":"Tarea3_4/Tarea3_2/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea3_4/Tarea3_2/#1-creacion-de-una-aplicacion-react","title":"1. Creaci\u00f3n de una aplicaci\u00f3n React","text":"<p>Lo primero que debemos hacer es crear una aplicaci\u00f3n React. El c\u00f3digo de la aplicaci\u00f3n ha sido facilitado. los archivos han sido guardados en la correspondiente carpeta de proyecto. </p> <p>a continuaci\u00f3n inicializamos node.js con el comando:</p> <pre><code>npm init \n</code></pre> <p></p> <p>ahora ejecutamos la aplicaci\u00f3n con el comando:</p> <pre><code>node aplicacion.js\n</code></pre> <p></p> <p>y como podemos ver la aplicaci\u00f3n se ejecuta correctamente.</p> <p></p>"},{"location":"Tarea3_4/Tarea3_2/#2-despliegue-de-la-aplicacion-en-netlify","title":"2. Despliegue de la aplicaci\u00f3n en Netlify","text":"<p>En una nueva carpeta de proyecto, clonamos de github el repositorio para realizar la practica. Nota, inicializar el reposititrio en la carpeta correcta</p> <p></p> <p>Ahora debemos instalar las dependencias de la aplicaci\u00f3n dentro de la carpeta con el comando:</p> <pre><code>npm install netlify-cli -g\n</code></pre> <p></p> <p>Ahora debemos loguearnos en netlify con el comando. pero no debemos iniciar sesion con github</p> <pre><code>netlify login\n</code></pre> <p></p> <p>Ahora debemos desplegar la aplicaci\u00f3n con el comando:</p> <pre><code>netlify deploy\n</code></pre> <p> </p> <p>con el enlace que nos proporciona netlify podemos acceder a la aplicaci\u00f3n desplegada.</p> <p></p> <p>y como podemos ver la aplicaci\u00f3n se ha desplegado correctamente.</p>"},{"location":"Tarea3_4/Tarea3_2/#3-proceso-de-despliegue-en-netlify","title":"3. Proceso de despliegue en Netlify","text":"<p>En la pagina de netlify, debemos conseguir un token de autenticaci\u00f3n para poder desplegar la aplicaci\u00f3n. con el siguiente comando podemos aplicar el token en la terminal.</p> <p></p> <p>Ahora debemos borrar la aplicaci\u00f3n que hemos creado antes para evitar conflictos con el despliegue de la nueva aplicaci\u00f3n.</p> <p></p> <p>y ademas borramos la carpeta de la aplicaci\u00f3n que hemos creado antes.</p> <p></p> <p>ahora nos descargamos el repositorio de la aplicaci\u00f3n que vamos a desplegar en netlify en formaoto .zip con el siguiente comando</p> <pre><code>wget https://github.com/StackAbuse/color-shades-generator/archive/refs/heads/main.zip\n</code></pre> <p></p> <p>Creamos la carpeta de la aplicaci\u00f3n y descomprimimos el archivo .zip en la carpeta con el siguiente comando. Atencion a que se descomprime en la carpeta correcta.</p> <p></p> <p>Tambien debemos crear un repositorio en github para poder desplegar la aplicaci\u00f3n en netlify. Donde debemos subir el contenido de la carpeta de la aplicaci\u00f3n.</p> <p></p> <p>Ahora debemos enlazar github con netlify para poder desplegar la aplicaci\u00f3n.</p> <p> </p> <p>Debemos enlazarlo exclusivamente con el repositorio de la aplicaci\u00f3n.</p> <p></p> <p></p> <p>Ahora vamos a desplegar la aplicaci\u00f3n en netlify dandole nombre, no necesitamos modificar nada </p> <p></p> <p>desplegamos la aplicaci\u00f3n</p> <p></p> <p>tras unos minutos podremos acceder a la aplicaci\u00f3n desplegada en netlify.</p> <p> </p> <p>por ultimo modificamos robots.txt para que no se indexe la pagina en los motores de busqueda.</p> <p> </p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/","title":"Pr\u00e1ctica 3.5","text":""},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#configuracion-de-un-servidor-nginx-con-hosts-virtuales-y-directorios-de-usuario","title":"Configuraci\u00f3n de un servidor Nginx con Hosts Virtuales y directorios de usuario","text":""},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#0-preparativos","title":"0. Preparativos","text":"<p>Primero que nada debemos asegurarnos de tener ssh en nuestra maquina fisica</p> <p></p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#1-creacion-de-usuarios","title":"1. Creaci\u00f3n de usuarios","text":"<p>A\u00f1adimos 2 usuarios <code>pepe</code> y <code>anton</code> con el comando <code>sudo adduser -m -s /bin/bash pepe</code> y <code>sudo adduser -m -s /bin/bash anton</code> junto a su respectiva contrase\u00f1a <code>passwd pepe</code> y <code>passwd anton</code>.</p> <p></p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#21-usuario-pepe","title":"2.1 Usuario Pepe","text":"<p>Dado que tendremos que configurar el servidor para cada usuario vamos a hacer primero 1 y luego otro. Iniciamos sesi\u00f3n con el usuario <code>pepe</code> </p> <p></p> <p>Creamos su carpeta, configurando los permisos de la carpeta</p> <pre><code>setfacl -d -R -m u:www-data:rwx public_html\ngetfacl public_html\n</code></pre> <p></p> <p>Dentro de esta carpeta un index.html, que contenga una peque\u00f1a pagina web. Con diferencias a la que mas tarde haremos con anton </p> <p></p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#22-nginx","title":"2.2 Nginx","text":"<p>Dado que ya hemos instalado multiples veces nginx a lo largo de las practicas no considero relveante volver a explicar como instalarlo. </p> <p></p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#23-https-pepe","title":"2.3 Https Pepe","text":"<p>De vuelva con el usuario princial, generamos un certificado autofirmado </p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/pepe.pem -out /etc/ssl/certs/pepe.pem\n</code></pre> <p></p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#24-configuracion-de-nginx","title":"2.4 Configuraci\u00f3n de Nginx","text":"<p>Creamos un archivo de configuraci\u00f3n en <code>/etc/nginx/sites-available/pepe</code> con el siguiente contenido</p> <p>Primeramente la redirection de http a https</p> <pre><code>\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name pepe.es;\n\n    location / {\n        return 301 https://$server_name$request_uri;\n    }   \n}\n</code></pre> <p></p> <p>y a continuaci\u00f3n la configuraci\u00f3n para https</p> <pre><code>server {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    server_name pepe.es;\n\n    ssl_certificate /etc/ssl/certs/pepe.pem;\n    ssl_certificate_key /etc/ssl/private/pepe.pem;\n\n    root /home/pepe/public_html;\n    index index.html;\n    location / {\n\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p></p> <p>Ahora que esta el archivo creado, lo enlazamos a sites-enabled </p> <p></p> <p>Por ultimo pasado el test de configuraci\u00f3n reiniciamos el servicio</p> <p></p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#25-comprobacion","title":"2.5 Comprobaci\u00f3n","text":"<p>como breve inciso, debemos a\u00f1adir la ip actual a nuestro archivo de hosts junto a los dominios </p> <p></p> <p>Y ahora al poner pepe.es vemos la pagina web de pepe, ademas de tener lo permisos auto firmados y la redirecci\u00f3n de http a https</p> <p></p> <p></p>"},{"location":"Tarea3_5_Ampliacion/Tarea3_5/#31-usuario-anton","title":"3.1 Usuario Anton","text":"<p>Ahora repetimos el proceso con el usuario <code>anton</code>. Dado que las instrucciones son las mismas, solo mostrare las capturas del proceso y el resultado final</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Tarea4_1/Tarea4_1/","title":"Pr\u00e1ctica 4.1","text":""},{"location":"Tarea4_1/Tarea4_1/#configuracion-de-un-servidor-dn","title":"Configuraci\u00f3n de un servidor DN","text":""},{"location":"Tarea4_1/Tarea4_1/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea4_1/Tarea4_1/#0-preparativos","title":"0. Preparativos","text":"<p>Vamos a hacer todo el proceso a traves de ssh</p> <p></p>"},{"location":"Tarea4_1/Tarea4_1/#1-instalacion-de-servidor-dns","title":"1. Instalaci\u00f3n de servidor DNS","text":"<p>Instalar los servicios necesarios</p> <pre><code>sudo apt-get install bind9 bind9utils bind9-doc \n</code></pre> <p></p>"},{"location":"Tarea4_1/Tarea4_1/#2-configuracion-del-servidor-dns","title":"2. Configuraci\u00f3n del servidor DNS","text":"<p>Vamos a configurar el servidor DNS para que resuelva los nombres de los equipos de la red local.</p> <pre><code>sudo nano /etc/default/named\n</code></pre> <p>debemos a\u00f1adir a named lo siguiente para que solo use ipv4</p> <pre><code>OPTIONS=\"-u bind -4\"\n</code></pre> <p></p> <p>el archivo de configuraci\u00f3n de bind9 es /etc/bind/named.conf que debera verse tal como en la imagen</p> <pre><code>sudo nano /etc/bind/named.conf\n</code></pre> <p></p>"},{"location":"Tarea4_1/Tarea4_1/#3-configuracion-namedconfoptions","title":"3. configuraci\u00f3n named.conf.options","text":"<p>Hacemos una copia de seguridad del fichero que vamos a modificar, por si algo sale mal.</p> <pre><code>sudo cp /etc/bind/named.conf.options /etc/bind/named.conf.options.backup\n</code></pre> <p></p> <p>Editamos el fichero named.conf.options</p> <pre><code>sudo nano /etc/bind/named.conf.options\n</code></pre> <p>por motivo de seguridad se a\u00f1ade una lista de ip autoriazadas a consultar el servidor DNS</p> <p></p> <p>tambien debemos a\u00f1adir las siguientes lineas para que el servidor DNS pueda resolver nombres de dominio</p> <pre><code>allow-recursion { confiables; };\nallow-transfer { none; };\nlisten-on port 53 { 192.165.1.143; };\n</code></pre> <p></p> <p>Nos aseguramos de que el archivo no tiene errores de sintaxis y ademas reiniciamos el servicio</p> <p></p> <p>modificamos el archivo named.conf.local para a\u00f1adir la zona de resoluci\u00f3n directa</p> <p></p>"},{"location":"Tarea4_1/Tarea4_1/#4-configuracion-de-la-zona-de-resolucion-inversa","title":"4. Configuraci\u00f3n de la zona de resoluci\u00f3n inversa","text":"<p>Creamos el archivo db.deaw.es, que contendr\u00e1 la informaci\u00f3n de la zona de resoluci\u00f3n inversa.</p> <p></p> <p>modificamos el archivo named.conf.local para a\u00f1adir la zona de resoluci\u00f3n inversa</p> <p></p> <p>y creamos el archivo db.192.168.1 que contendra la informacion de la zona de resolucion directa</p> <p></p>"},{"location":"Tarea4_1/Tarea4_1/#5-comprobaciones","title":"5. Comprobaciones","text":"<p>Comprobamos que el servidor DNS resuelve los nombres de los equipos de la red local. Tanto de forma directa como inversa.</p> <p></p> <p>reiniciamos el servicio y comprobamos que todo funciona correctamente</p> <p></p> <p>Modificamos el archivo /etc/resolv.conf de una maquina cliente para que apunte a nuestro servidor DNS</p> <p></p>"},{"location":"Tarea4_1/Tarea4_1/#6-resultado","title":"6. Resultado","text":""},{"location":"Tarea4_1/Tarea4_1/#7-cuestiones","title":"7. Cuestiones","text":""},{"location":"Tarea4_1/Tarea4_1/#cuestion-1","title":"Cuesti\u00f3n 1","text":"<p>\u00bfQu\u00e9 pasar\u00e1 si un cliente de una red diferente a la tuya intenta hacer uso de tu DNS de alguna manera, le funcionar\u00e1?\u00bfPor qu\u00e9, en qu\u00e9 parte de la configuraci\u00f3n puede verse?</p> <p>No, solo funcionar\u00e1 si est\u00e1 permitido en la configuraci\u00f3n, espec\u00edficamente en la directiva allow-query, que define qu\u00e9 clientes pueden realizar consultas.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-2","title":"Cuesti\u00f3n 2","text":"<p>\u00bfPor qu\u00e9 tenemos que permitir las consultas recursivas en la configuraci\u00f3n?</p> <p>Para resolver nombres de dominios que el servidor no controla, utilizando otros servidores DNS para obtener la informaci\u00f3n.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-3","title":"Cuesti\u00f3n 3","text":"<p>El servidor DNS que acab\u00e1is de montar, \u00bfes autoritativo?\u00bfPor qu\u00e9?</p> <p>S\u00ed, si tiene configuradas zonas con datos autoritativos para ciertos dominios. Si no, no es autoritativo.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-4","title":"Cuesti\u00f3n 4","text":"<p>\u00bfD\u00f3nde podemos encontrar la directiva $ORIGIN y para qu\u00e9 sirve?</p> <p>Se encuentra en los archivos de zona y sirve para definir el dominio base que se aplicar\u00e1 a los registros dentro de ese archivo.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-5","title":"Cuesti\u00f3n 5","text":"<p>\u00bfUna zona es id\u00e9ntico a un dominio?</p> <p>No, una zona es una parte de un dominio, pero un dominio puede abarcar varias zonas.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-6","title":"Cuesti\u00f3n 6","text":"<p>\u00bfPueden editarse los archivos de zona de un servidor esclavo/secundario?</p> <p>No, los archivos de zona en un servidor esclavo son replicados desde el maestro y no se pueden editar directamente.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-7","title":"Cuesti\u00f3n 7","text":"<p>\u00bfPor qu\u00e9 podr\u00eda querer tener m\u00e1s de un servidor esclavo para una misma zona?</p> <p>Para garantizar redundancia, balancear la carga y aumentar la disponibilidad del servicio DNS.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-8","title":"Cuesti\u00f3n 8","text":"<p>\u00bfCu\u00e1ntos servidores ra\u00edz existen?</p> <p>Hay 13 servidores ra\u00edz distribuidos globalmente, identificados como letras de la A a la M.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-9","title":"Cuesti\u00f3n 9","text":"<p>\u00bfQu\u00e9 es una consulta iterativa de referencia?</p> <p>Una consulta iterativa devuelve referencias a otros servidores DNS, permitiendo que el cliente contin\u00fae la resoluci\u00f3n.</p>"},{"location":"Tarea4_1/Tarea4_1/#cuestion-10","title":"Cuesti\u00f3n 10","text":"<p>En una resoluci\u00f3n inversa, \u00bfa qu\u00e9 nombre se mapear\u00eda la direcci\u00f3n IP 172.16.34.56?</p> <p>La direcci\u00f3n IP 172.16.34.56 se mapear\u00eda a 56.34.16.172.in-addr.arpa mediante un archivo de zona de resoluci\u00f3n inversa.</p>"},{"location":"Tarea5_1/Tarea5_1/","title":"Pr\u00e1ctica 5.1","text":""},{"location":"Tarea5_1/Tarea5_1/#ejercicios-git-y-github-i","title":"ejercicios Git y GitHub I","text":""},{"location":"Tarea5_1/Tarea5_1/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea5_1/Tarea5_1/#repositorio","title":"Repositorio","text":"<ol> <li>Crear un repositorio en GitHub .</li> <li>Clonar repositorio en local.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#readme","title":"README","text":"<ol> <li>Crear README.md.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#commit-inicial","title":"Commit inicial","text":"<ol> <li>Realizar un commit inicial.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#push-inicial","title":"Push inicial","text":"<ol> <li>Subir los cambios al repositorio remoto.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#ignorar-archivos","title":"Ignorar archivos","text":"<ol> <li>Crear fichero <code>privado.txt</code>.</li> <li>Crear carpeta <code>privada</code>.</li> <li>A\u00f1adir <code>.gitignore</code> para ignorar los ficheros creados.  </li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#anadir-fichero-1txt","title":"A\u00f1adir fichero 1.txt","text":"<ol> <li>A\u00f1adir fichero <code>1.txt</code> al repositorio local.</li> </ol> <pre><code>echo \"Hola\" &gt; 1.txt\ngit add 1.txt\ngit commit -m \"A\u00f1adido fichero 1.txt\"\ngit push\n</code></pre>"},{"location":"Tarea5_1/Tarea5_1/#crear-el-tag-v01","title":"Crear el tag v0.1","text":"<ol> <li>Crear un tag <code>v0.1</code>.</li> <li>Subir los cambios al repositorio remoto.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#uso-social-de-github","title":"Uso social de GitHub","text":"<ol> <li>Preguntar los nombres de usuario de GitHub de 2 de tus compa\u00f1eros de clase, b\u00fascalos, y s\u00edgueles.</li> <li>Seguir los repositorios DEAW del resto de tus compa\u00f1eros.</li> <li>A\u00f1adir una estrella a los repositorios DEAW del resto de tus compa\u00f1eros.</li> </ol> <p>no he considerado en hacer este apartado </p>"},{"location":"Tarea5_1/Tarea5_1/#crear-una-tabla","title":"Crear una tabla","text":"<p>Crear una tabla de este estilo en el fichero README.md con la informaci\u00f3n de varios de tus compa\u00f1eros de clase:</p> <p></p>"},{"location":"Tarea5_1/Tarea5_1/#colaboradores","title":"Colaboradores","text":"<p>Poner a github.com/raul-profesor como colaborador del repositorio DEAW.</p>"},{"location":"Tarea5_1/Tarea5_1/#notas","title":"Notas","text":"<p>Este ejercicio es continuaci\u00f3n del anterior por lo que tendr\u00e9is que seguir trabajando en el repositorio DEAW.</p> <p>Tambi\u00e9n tendr\u00e9is que ir poniendo los comandos que hab\u00e9is tenido que utilizar durante todos los ejercicios y las explicaciones y capturas de pantalla que consider\u00e9is necesarias en el informe.</p> <p></p> <p></p>"},{"location":"Tarea5_1/Tarea5_1/#crear-una-rama-v02","title":"Crear una rama v0.2","text":"<ol> <li>Crear una rama <code>v0.2</code>.</li> <li>Posiciona tu carpeta de trabajo en esta rama.</li> </ol> <pre><code>git branch v0.2\ngit checkout v0.2\n</code></pre>"},{"location":"Tarea5_1/Tarea5_1/#anadir-fichero-2txt","title":"A\u00f1adir fichero 2.txt","text":"<ol> <li>A\u00f1adir un fichero <code>2.txt</code> en la rama <code>v0.2</code>.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#crear-rama-remota-v02","title":"Crear rama remota v0.2","text":"<ol> <li>Subir los cambios al repositorio remoto.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#merge-directo","title":"Merge directo","text":"<ol> <li>Posicionarse en la rama <code>main</code>.</li> <li>Hacer un merge de la rama <code>v0.2</code> en la rama <code>main</code>.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#merge-con-conflicto","title":"Merge con conflicto","text":"<ol> <li>En la rama <code>main</code> poner <code>Hola</code> en el fichero <code>1.txt</code> y hacer commit.</li> <li>Posicionarse en la rama <code>v0.2</code> y poner <code>Adios</code> en el fichero <code>1.txt</code> y hacer commit.</li> <li>Posicionarse de nuevo en la rama <code>main</code> y hacer un merge con la rama <code>v0.2</code>.</li> <li>Arreglar el conflicto anterior y hacer un commit.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#listado-de-ramas","title":"Listado de ramas","text":"<ol> <li>Listar las ramas con merge y las ramas sin merge.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#arreglar-conflicto","title":"Arreglar conflicto","text":""},{"location":"Tarea5_1/Tarea5_1/#borrar-rama","title":"Borrar rama","text":"<ol> <li>Crear un tag <code>v0.2</code>.</li> <li>Borrar la rama <code>v0.2</code>.</li> </ol>"},{"location":"Tarea5_1/Tarea5_1/#listado-de-cambios","title":"Listado de cambios","text":"<ol> <li>Listar los distintos commits con sus ramas y sus tags.</li> </ol>"},{"location":"Tarea5_2/Tarea5_2/","title":"Pr\u00e1ctica 5.2","text":""},{"location":"Tarea5_2/Tarea5_2/#ejercicios-git-y-github-ii","title":"Ejercicios Git y GitHub II","text":""},{"location":"Tarea5_2/Tarea5_2/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea5_2/Tarea5_2/#ejercicios-de-creacion-y-actualizacion-de-repositorios","title":"Ejercicios de creaci\u00f3n y actualizaci\u00f3n de repositorios","text":""},{"location":"Tarea5_2/Tarea5_2/#ejercicio-1","title":"Ejercicio 1","text":"<p>Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de la salida. Mostrar la configuraci\u00f3n final.</p> <p>Dado que ya tenia configurado el usuario y el correo, solo he tenido que activar el coloreado de la salida.</p> <pre><code>git config --global user.name \"&lt;nombre&gt;\"\ngit config --global user.email \"&lt;correo&gt;\"\ngit config --global color.ui auto\ngit config --list\n</code></pre> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crear un repositorio nuevo con el nombre <code>libro</code> y mostrar su contenido.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-3","title":"Ejercicio 3","text":"<p>Comprobar el estado del repositorio. Crear un fichero <code>indice.txt</code> con el siguiente contenido:</p> <ul> <li>Cap\u00edtulo 1: Introducci\u00f3n a Git  </li> <li>Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico  </li> <li>Cap\u00edtulo 3: Repositorios remotos  </li> </ul> <p>Comprobar de nuevo el estado del repositorio. A\u00f1adir el fichero a la zona de intercambio temporal. Volver a comprobar una vez m\u00e1s el estado del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-4","title":"Ejercicio 4","text":"<p>Realizar un commit de los \u00faltimos cambios con el mensaje \u201cA\u00f1adido \u00edndice del libro.\u201d y ver el estado del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-5","title":"Ejercicio 5","text":"<p>Cambiar el fichero <code>indice.txt</code> para que contenga lo siguiente:</p> <ul> <li>Cap\u00edtulo 1: Introducci\u00f3n a Git  </li> <li>Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico  </li> <li>Cap\u00edtulo 3: Gesti\u00f3n de ramas  </li> <li>Cap\u00edtulo 4: Repositorios remotos  </li> </ul> <p>Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\u201d.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-6","title":"Ejercicio 6","text":"<p>Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior. Cambiar el mensaje del \u00faltimo commit por \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\u201d Volver a mostrar los \u00faltimos cambios del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicios-de-manejo-del-historial-de-cambios","title":"Ejercicios de manejo del historial de cambios","text":""},{"location":"Tarea5_2/Tarea5_2/#ejercicio-1_1","title":"Ejercicio 1","text":"<p>Mostrar el historial de cambios del repositorio. Crear la carpeta <code>capitulos</code> y crear dentro de ella el fichero <code>capitulo1.txt</code> con el siguiente texto: <code>Git es un sistema de control de versiones ideado por Linus Torvalds.</code> A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 1.\u201d Volver a mostrar el historial de cambios del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-2_1","title":"Ejercicio 2","text":"<p>Crear el fichero <code>capitulo2.txt</code> en la carpeta <code>capitulos</code> con el siguiente texto: <code>El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</code> A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 2.\u201d Mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-3_1","title":"Ejercicio 3","text":"<p>Crear el fichero <code>capitulo3.txt</code> en la carpeta <code>capitulos</code> con el siguiente texto: <code>Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simult\u00e1nea en ellas.</code> A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3.\u201d Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-4_1","title":"Ejercicio 4","text":"<p>A\u00f1adir al final del fichero <code>indice.txt</code> la siguiente l\u00ednea: <code>Cap\u00edtulo 5: Conceptos avanzados</code> A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 5 al \u00edndice.\u201d Mostrar qui\u00e9n ha hecho cambios sobre el fichero <code>indice.txt</code>.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicios-de-deshacer-cambios","title":"Ejercicios de deshacer cambios","text":""},{"location":"Tarea5_2/Tarea5_2/#ejercicio-1_2","title":"Ejercicio 1","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo. Comprobar el estado del repositorio. Deshacer los cambios realizados en el fichero <code>indice.txt</code> para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-2_2","title":"Ejercicio 2","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo. A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados en el fichero <code>indice.txt</code> para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-3_2","title":"Ejercicio 3","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo. Eliminar el fichero <code>capitulos/capitulo3.txt</code>. A\u00f1adir un fichero nuevo <code>capitulos/capitulo4.txt</code> vac\u00edo. A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio. Volver a comprobar el estado del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-4_2","title":"Ejercicio 4","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo. Eliminar el fichero <code>capitulos/capitulo3.txt</code>. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d Comprobar el historial del repositorio. Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal. Comprobar el historial y el estado del repositorio. Volver a hacer el commit con el mismo mensaje de antes. Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio. Comprobar de nuevo el historial y el estado del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicios-de-gestion-de-ramas","title":"Ejercicios de gesti\u00f3n de ramas","text":""},{"location":"Tarea5_2/Tarea5_2/#ejercicio-1_3","title":"Ejercicio 1","text":"<p>Crear una nueva rama <code>bibliografia</code> y mostrar las ramas del repositorio.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-2_3","title":"Ejercicio 2","text":"<p>Crear el fichero <code>capitulos/capitulo4.txt</code> y a\u00f1adir el texto siguiente: <code>En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto.</code> A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido cap\u00edtulo 4.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-3_3","title":"Ejercicio 3","text":"<p>Cambiar a la rama <code>bibliografia</code>. Crear el fichero <code>bibliografia.txt</code> y a\u00f1adir la siguiente referencia: <code>Chacon, S. and Straub, B. Pro Git. Apress.</code> A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adida primera referencia bibliogr\u00e1fica.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-4_3","title":"Ejercicio 4","text":"<p>Fusionar la rama <code>bibliografia</code> con la rama <code>master</code>. Mostrar la historia del repositorio incluyendo todas las ramas. Eliminar la rama <code>bibliografia</code>. Mostrar de nuevo la historia del repositorio incluyendo todas las ramas.</p> <p></p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-5_1","title":"Ejercicio 5","text":"<p>Crear la rama <code>bibliografia</code>. Cambiar a la rama <code>bibliografia</code>. Cambiar el fichero <code>bibliografia.txt</code> para que contenga las siguientes referencias:</p> <ul> <li><code>Scott Chacon and Ben Straub. Pro Git. Apress.</code> </li> <li><code>Ryan Hodson. Ry\u2019s Git Tutorial. Smashwords (2014)</code> </li> </ul> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Cambiar a la rama <code>master</code>. Cambiar el fichero <code>bibliografia.txt</code> para que contenga las siguientes referencias:</p> <ul> <li><code>Chacon, S. and Straub, B. Pro Git. Apress.</code> </li> <li><code>Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.</code> </li> </ul> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Fusionar la rama <code>bibliografia</code> con la rama <code>master</code>. Resolver el conflicto dejando el fichero <code>bibliografia.txt</code> con las referencias:</p> <ul> <li><code>Chacon, S. and Straub, B. Pro Git. Apress.</code> </li> <li><code>Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.</code> </li> <li><code>Hodson, R. Ry\u2019s Git Tutorial. Smashwords (2014)</code> </li> </ul> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cResuelto conflicto de bibliograf\u00eda.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p> </p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicios-de-repositorios-remotos","title":"Ejercicios de repositorios remotos","text":""},{"location":"Tarea5_2/Tarea5_2/#ejercicio-1_4","title":"Ejercicio 1","text":"<p>Crear un nuevo repositorio p\u00fablico en GitHub con el nombre <code>libro-git</code>. A\u00f1adirlo al repositorio local del libro. Mostrar todos los repositorios remotos configurados.</p> <p> </p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-2_4","title":"Ejercicio 2","text":"<p>A\u00f1adir los cambios del repositorio local al repositorio remoto de GitHub. Acceder a GitHub y comprobar que se han subido los cambios mostrando el historial de versiones.  </p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-3_4","title":"Ejercicio 3","text":"<p>Colaborar en el repositorio remoto <code>libro-git</code> de otro usuario. Clonar su repositorio <code>libro-git</code>. A\u00f1adir el fichero <code>autores.txt</code> que contenga el nombre del usuario y su correo electr\u00f3nico. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d Subir los cambios al repositorio remoto.</p> <p>Tener en cuenta que debe a\u00f1adirnos como colaboradores para poder hacer cambios en el repositorio.</p> <p> </p>"},{"location":"Tarea5_2/Tarea5_2/#ejercicio-4_4","title":"Ejercicio 4","text":"<p>Hacer una bifurcaci\u00f3n del repositorio remoto <code>asalber/libro-git</code> en GitHub. Clonar el repositorio creado en la cuenta de GitHub del usuario. Crear una nueva rama <code>autoria</code> y activarla. A\u00f1adir el nombre del usuario y su correo al fichero <code>autores.txt</code>. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido nuevo autor.\u201d Subir los cambios de la rama <code>autoria</code> al repositorio remoto en GitHub. Hacer un Pull Request de los cambios en la rama <code>autoria</code>.</p> <p> </p>"},{"location":"Tarea6_1/Tarea6_1/","title":"Pr\u00e1ctica 6.1","text":""},{"location":"Tarea6_1/Tarea6_1/#ejercicios-de-docker","title":"Ejercicios de Docker","text":""},{"location":"Tarea6_1/Tarea6_1/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea6_1/Tarea6_1/#dockerizacion-del-despliegue-de-una-aplicacion-nodejs","title":"Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n Node.js","text":""},{"location":"Tarea6_1/Tarea6_1/#0-conexion-ssh","title":"0. Conexi\u00f3n ssh","text":"<p>conexi\u00f3n ssh con la m\u00e1quina virtual</p> <p></p>"},{"location":"Tarea6_1/Tarea6_1/#1-despliegue-con-docker","title":"1. Despliegue con Docker","text":"<p>Clonar el repositorio de la aplicaci\u00f3n </p> <p>Antes de continuar, instalar Docker</p> <p></p> <p>Recomendacion siempre hacer una copia de los ficheros de configuraci\u00f3n de Docker antes de actualizarlos, los doy por echos y el repositorio de la aplicacion ya contiene copias</p> <p>Completar el Dockerfile con las propiedades indicadas para esta aplicaci\u00f3n</p> <pre><code>\n# Usamos la imagen base de Node.js versi\u00f3n 18 con Alpine (versi\u00f3n ligera)\nFROM node:18.16.0-alpine3.17\n\n# Establecemos el directorio de trabajo dentro del contenedor\nWORKDIR /opt/app\n\n# Creamos el directorio donde se instalar\u00e1n las dependencias\nRUN mkdir -p /opt/app\n\n# Copiamos los archivos package.json y package-lock.json al contenedor\nCOPY src/package.json src/package-lock.json ./\n\n# Instalamos las dependencias de la aplicaci\u00f3n\nRUN npm install\n\n# Copiamos el resto de los archivos de la carpeta src al contenedor\nCOPY src/ ./\n\n# Exponemos el puerto 3000 para la aplicaci\u00f3n\nEXPOSE 3000\n\n# Comando para ejecutar la aplicaci\u00f3n en modo desarrollo\nCMD [\"npm\", \"run\", \"start:dev\"]\n</code></pre> <p></p> <p>Creamos la build del contenedor. Esta es librodirecciones</p> <pre><code>sudo docker build -t librodirecciones .\n</code></pre> <p></p> <p>Ejecutamos el contenedor, con esto se levanta el servidor y se puede acceder a la aplicaci\u00f3n</p> <pre><code>sudo docker run -d -p 3000:3000 librodirecciones\n</code></pre> <p></p> <p>si todo hay ido bien al ir a la direcci\u00f3n http://localhost:3000/ deber\u00eda aparecer un error</p> <p></p>"},{"location":"Tarea6_1/Tarea6_1/#2-despliegue-con-docker-compose","title":"2. Despliegue con Docker Compose","text":"<p>Crear el archivo docker-compose.yml. El git proporcionado ya lo contiene\u00a1</p> <p></p> <p>Instalar docker-compose</p> <p></p> <p>ejecutar el docker-compose</p> <pre><code>sudo docker run -p 3000:3000 librodirecciones\n</code></pre> <p></p> <p></p> <p>levantar el contenedor</p> <p></p> <p>pruebas de funcionamiento</p> <p></p> <p></p> <p>Instalar curl para hacer pruebas de funcionamiento</p> <p></p> <p>Para el correcto funcionamiento es necesario modificar package.json, a\u00f1adiendo la siguiente l\u00ednea</p> <pre><code>\"start:dev\": \"star bin/www\"\n</code></pre> <p></p> <p>a\u00f1adir un nuevo elemento a la aplicaci\u00f3n </p> <p>mostrar 1 elemento de la aplicaci\u00f3n</p> <p></p> <p>borrar 1 elemento de la aplicaci\u00f3n</p> <p></p>"},{"location":"Tarea6_2/Tarea6_2/","title":"Pr\u00e1ctica 6.2","text":""},{"location":"Tarea6_2/Tarea6_2/#ejercicios-de-docker","title":"Ejercicios de Docker","text":""},{"location":"Tarea6_2/Tarea6_2/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea6_2/Tarea6_2/#despliegue-de-una-aplicacion-php-con-nginx-y-mysql-usando-docker-y-docker-compose","title":"Despliegue de una aplicaci\u00f3n PHP con Nginx y MySQL usando Docker y docker-compose","text":""},{"location":"Tarea6_2/Tarea6_2/#0-conexion-ssh","title":"0. Conexi\u00f3n ssh","text":"<p>conexi\u00f3n ssh con la m\u00e1quina virtual</p> <p></p>"},{"location":"Tarea6_2/Tarea6_2/#1-estructura-de-la-aplicacion","title":"1. Estructura de la aplicaci\u00f3n","text":"<p>/usuario/home/practica6-2/ \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 nginx \u2502   \u251c\u2500\u2500 default.conf \u2502   \u2514\u2500\u2500 Dockerfile \u251c\u2500\u2500 php \u2502   \u2514\u2500\u2500 Dockerfile \u2514\u2500\u2500 www     \u2514\u2500\u2500 html         \u2514\u2500\u2500 index.php</p> <pre><code>mkdir -p /usuario/home/practica6-2/nginx /usuario/home/practica6-2/php /usuario/home/practica6-2/www/html\n\ntouch /usuario/home/practica6-2/docker-compose.yml\ntouch /usuario/home/practica6-2/nginx/default.conf\ntouch /usuario/home/practica6-2/nginx/Dockerfile\ntouch /usuario/home/practica6-2/php/Dockerfile\ntouch /usuario/home/practica6-2/www/html/index.php\n</code></pre> <p>Crear la estructura basica de la aplicaci\u00f3n, a\u00f1adiremos mas </p>"},{"location":"Tarea6_2/Tarea6_2/#2-creacion-de-contenedor-de-nginx","title":"2. Creaci\u00f3n de contenedor de Nginx","text":"<p>Creamos el archivo docker-compose.yml con este contenido inicialmente</p> <p></p> <p>Ahora levantamos el contenedor y verificamos que funciona</p> <pre><code>sudo docker-compose up -d\nsudo docker ps\n</code></pre> <p></p> <p>Si todo esta correcto, podemos ver la pagina de bienvenida de Nginx</p> <p></p>"},{"location":"Tarea6_2/Tarea6_2/#3-creacion-de-contenedor-de-php","title":"3. Creaci\u00f3n de contenedor de PHP","text":"<p>creamos la carpeta en caso de no haberla creado antes y  creamos el archivo index.php</p> <p></p> <p>y a\u00f1adimos el contenido del archivo index.php</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n  &lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Creamos el archivo de configuraci\u00f3n de Nginx</p> <pre><code>sudo nano /usuario/home/practica6-2/nginx/default.conf\n</code></pre> <p> y a\u00f1adimos el siguiente contenido</p> <pre><code>server {\n\n     listen 80 default_server;\n     root /var/www/html;\n     index index.html index.php;\n\n     charset utf-8;\n\n     location / {\n      try_files $uri $uri/ /index.php?$query_string;\n     }\n\n     location = /favicon.ico { access_log off; log_not_found off; }\n     location = /robots.txt { access_log off; log_not_found off; }\n\n     access_log off;\n     error_log /var/log/nginx/error.log error;\n\n     sendfile off;\n\n     client_max_body_size 100m;\n\n     location ~ .php$ {\n      fastcgi_split_path_info ^(.+.php)(/.+)$;\n      fastcgi_pass php:9000;\n      fastcgi_index index.php;\n      include fastcgi_params;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_intercept_errors off;\n      fastcgi_buffer_size 16k;\n      fastcgi_buffers 4 16k;\n    }\n\n     location ~ /.ht {\n      deny all;\n     }\n    }\n</code></pre> <p></p> <p>Creamos el archivo Dockerfile de Nginx con el siguiente contenido</p> <pre><code>sudo nano /usuario/home/practica6-2/nginx/Dockerfile\n</code></pre> <pre><code>FROM nginx:latest\nCOPY ./default.conf /etc/nginx/conf.d/default.conf\n</code></pre> <p></p> <p>editamos el archivo docker-compose.yml con este contendio, aqui a\u00f1adimos la parte de php</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes:\n      - ./www/html/:/var/www/html/\n\n  php:\n    image: php:7.0-fpm\n    container_name: php-container\n    expose:\n      - 9000\n    volumes:\n      - ./www/html/:/var/www/html/\n</code></pre> <p></p> <p>Levantamos los contenedores</p> <pre><code>sudo docker-compose up -d\nsudo docker ps\n</code></pre> <p> </p> <p>Si todo esta bien, podemos ver la pagina de bienvenida de php</p> <p></p>"},{"location":"Tarea6_2/Tarea6_2/#4-creacion-de-contenedor-para-datos","title":"4. Creaci\u00f3n de contenedor para datos","text":"<p>Editamos el archivo docker-compose.yml con este contenido</p> <pre><code>nginx:\n  build: ./nginx/\n  container_name: nginx-container\n  ports:\n    - 80:80\n  links:\n    - php\n  volumes_from:\n    - app-data\n\nphp:\n  image: php:7.0-fpm\n  container_name: php-container\n  expose:\n    - 9000\n  volumes_from:\n    - app-data\n\napp-data:\n  image: php:7.0-fpm\n  container_name: app-data-container\n  volumes:\n    - ./www/html/:/var/www/html/\n  command: \"true\"\n</code></pre> <p></p> <p>Levantamos los contenedores</p> <pre><code>sudo docker-compose up -d\nsudo docker ps\n</code></pre> <p> </p>"},{"location":"Tarea6_2/Tarea6_2/#5-creacion-de-contenedor-de-mysql","title":"5. Creaci\u00f3n de contenedor de MySQL","text":"<p>Creamos el archivo dockerfile de MySQL con el contenido</p> <pre><code>FROM php:7.0-fpm\nRUN docker-php-ext-install pdo_mysql\n</code></pre> <p>y actualizamos el archivo docker-compose.yml</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes_from:\n      - app-data\n  php:\n    build: ./php/\n    container_name: php-container\n    expose:\n      - 9000\n    links:\n      - mysql\n    volumes_from:\n      - app-data\n\n  app-data:\n    image: php:7.0-fpm\n    container_name: app-data-container\n    volumes:\n      - ./www/html/:/var/www/html/\n    command: \"true\"\n\n  mysql:\n    image: mysql:5.7\n    container_name: mysql-container\n    volumes_from:\n      - mysql-data\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: mydb\n      MYSQL_USER: myuser\n      MYSQL_PASSWORD: password\n\n  mysql-data:\n    image: mysql:5.7\n    container_name: mysql-data-container\n    volumes:\n      - /var/lib/mysql\n    command: \"true\"\n</code></pre> <p></p> <p>y el index.php</p> <pre><code>     &lt;!DOCTYPE html&gt;\n     &lt;head&gt;\n      &lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n     &lt;/head&gt;\n\n     &lt;body&gt;\n      &lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n      &lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n      &lt;?\n       $database =\"mydb\";\n       $user = \"myuser\";\n       $password = \"password\";\n       $host = \"mysql\";\n\n       $connection = new PDO(\"mysql:host={$host};dbname={$database};charset=utf8\", $user, $password);\n       $query = $connection-&gt;query(\"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE='BASE TABLE'\");\n       $tables = $query-&gt;fetchAll(PDO::FETCH_COLUMN);\n\n        if (empty($tables)) {\n          echo \"&lt;p&gt;No hay tablas en la base de datos \\\"{$database}\\\".&lt;/p&gt;\";\n        } else {\n          echo \"&lt;p&gt;La base de datos \\\"{$database}\\\" tiene las siguientes tablas:&lt;/p&gt;\";\n          echo \"&lt;ul&gt;\";\n            foreach ($tables as $table) {\n              echo \"&lt;li&gt;{$table}&lt;/li&gt;\";\n            }\n          echo \"&lt;/ul&gt;\";\n        }\n        ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Levantamos los contenedores</p> <pre><code>sudo docker-compose up -d\nsudo docker ps\n</code></pre> <p></p> <p>Deber\u00e1 verse de esta manera si todo esta correcto </p> <p>y ahora veremos la pagina de bienvenida de php </p> <p>en index.php sustituimos el contenido por este</p> <pre><code>$user = \"root\";\n$password = \"secret\";\n</code></pre> <p></p> <p>y ahora veremos la pagina de bienvenida de php </p> <p>y con esto terminamos la practica 6.2. Tenemos funcionado un servidor web con php y mysql en contenedores docker</p>"},{"location":"Tarea6_3/Tarea6_3/","title":"Pr\u00e1ctica 6.3","text":""},{"location":"Tarea6_3/Tarea6_3/#ejercicios-de-docker","title":"Ejercicios de Docker","text":""},{"location":"Tarea6_3/Tarea6_3/#javier-rider-jimenez","title":"Javier Rider Jimenez","text":""},{"location":"Tarea6_3/Tarea6_3/#despliegue-de-servidores-web-con-usuarios-autenticados-mediante-ldap-usando-docker-y-docker-compose","title":"Despliegue de servidores web con usuarios autenticados mediante LDAP usando Docker y docker-compose","text":""},{"location":"Tarea6_3/Tarea6_3/#0-conexion-ssh","title":"0. Conexi\u00f3n ssh","text":"<p>conexi\u00f3n ssh con la m\u00e1quina virtual</p> <p></p>"},{"location":"Tarea6_3/Tarea6_3/#1-despliegue-con-docker-de-nginx-demonio-de-autenticacion-ldap-openldap","title":"1. Despliegue con Docker de NGINX + demonio de autenticaci\u00f3n LDAP + OpenLDAP","text":"<p>creamos un directorio par ala aplicacion y con un contenido sencillo</p> <pre><code>$ mkdir app\n\n$ cat &lt;&lt; EOF &gt; app/index.html\n&lt;html&gt;\n&lt;body&gt;\n&lt;h1&gt;\u00a1Hola Mundo!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEOF\n</code></pre> <p></p> <p>Tambien otor directorio para los archivos de configuracion</p> <pre><code>$ mkdir conf\n\n$ cat &lt;&lt; EOF &gt; conf/ldap_nginx.conf\n    server {\n      listen 8080;\n\n      location = / {\n         auth_request /auth-proxy;\n      }\n\n      location = /auth-proxy {\n         internal;\n\n         proxy_pass http://nginx-ldap:8888;\n\n         # URL y puerto para conectarse al servidor LDAP\n         proxy_set_header X-Ldap-URL \"ldap://openldap:1389\";\n\n         # Base DN\n         proxy_set_header X-Ldap-BaseDN \"dc=example,dc=org\";\n\n         # Bind DN\n         proxy_set_header X-Ldap-BindDN \"cn=admin,dc=example,dc=org\";\n\n         # Bind password\n         proxy_set_header X-Ldap-BindPass \"adminpassword\";\n      }\n   }\nEOF\n</code></pre> <p></p> <p>yo lo he movido todo a un directorio para la practica</p> <p></p>"},{"location":"Tarea6_3/Tarea6_3/#12-creacion-de-un-archivo-docker-composeyml","title":"1.2 Creaci\u00f3n de un archivo docker-compose.yml","text":"<p>Levantamos el contenedor</p> <pre><code>$ docker-compose up -d\n</code></pre> <p></p> <p></p>"},{"location":"Tarea6_3/Tarea6_3/#2-despliegue-con-docker-de-php-apache-con-autenticacion-ldap","title":"2. Despliegue con Docker de PHP + Apache con autenticaci\u00f3n LDAP","text":"<p>Esto lo va tambien en el directorio de la practica</p> <p>Creamos en la raiz index.php</p> <pre><code>    &lt;?php\n    echo 'Ey, hola usuario autenticado por LDAP!';\n    ?&gt;\n</code></pre> <p></p> <p>A\u00f1adimos tambien el archivo dockerfile en Docker/dockerfile</p> <pre><code># ./Docker/Dockerfile --&gt; directorio donde se encuentra este archivo\n\n# Imagen base sobre la que vamos a trabajar\nFROM php:7-apache\n\n# Activamos el m\u00f3dulo LDAP de Apache ejecutando el siguiente comando\nRUN a2enmod authnz_ldap\n\n# A\u00f1adimos las reglas/configuraci\u00f3n de LDAP al directorio conf-enabled de Apache\n# (crearemos este archivo en el siguiente paso)\nCOPY Docker/ldap-demo.conf /etc/apache2/conf-enabled/\n\n# A\u00f1adimos ayuda de depuraci\u00f3n (debugging) en la configuraci\u00f3n de apache\n# En caso de necesitarlo, lo descomentamos para ejecutar el siguiente comando\n# RUN echo \"LogLevel debug\" &gt;&gt; /etc/apache2/apache2.conf\n\n# Establecemos el directorio de trabajo adecuado\nWORKDIR /var/www/html/demo\n\n# Configuramos Apache para usar la configuraci\u00f3n ldap definida arriba, la copiamos de nuestro ordenador al contenedor\nCOPY Docker/.htaccess ./.htaccess\n\n# Copiamos los archivos del proyecto que necesitamos al contenedor\nCOPY index.php ./\n</code></pre> <p></p> <p>A\u00f1adimos el archivo de configuraci\u00f3n ldap-demo.conf en Docker/ldap-demo.conf</p> <pre><code># ./Docker/ldap-demo.conf\nPassEnv LDAP_BIND_ON\nPassEnv LDAP_PASSWORD\nPassEnv LDAP_URL\n&lt;AuthnProviderAlias ldap demo&gt;\n    AuthLDAPBindDN ${LDAP_BIND_ON}\n    AuthLDAPBindPassword ${LDAP_PASSWORD}\n    AuthLDAPURL ${LDAP_URL}\n&lt;/AuthnProviderAlias&gt; \n</code></pre> <p></p> <p>A\u00f1adimos el archivo .htaccess en Docker/.htaccess</p> <pre><code># .Docker/.htaccess\nAuthBasicProvider demo\nAuthType Basic\nAuthName \"Protected Area\"\nRequire valid-user\n</code></pre> <p></p> <p>y ahora lanza el contenedor</p> <pre><code>docker build . \\\n    -t docker-ldap \\\n    -f ./Docker/dockerfile\n</code></pre> <p></p> <p></p> <p>si todo ha ido bien, deberiamos ver algo como esto</p> <p></p> <p>ponemos el usuario y contrase\u00f1a que hemos creado en el LDAP. admin y Secret123. y con esto vemos nuestra aplicacion de php</p> <p></p> <p>A comentar: En este ultimo paso ha habido varios problemas, dado que no paraba de perder la capacidad de conectarse a internet. he tenido que reiniciar multiples veces la maquina hasta que ha funcionado. </p>"}]}